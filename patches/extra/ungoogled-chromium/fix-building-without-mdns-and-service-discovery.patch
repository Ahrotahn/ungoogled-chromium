# Fix building with enable_service_discovery=false and enable_mds=false

--- a/chrome/browser/media/router/discovery/mdns/dns_sd_device_lister.cc
+++ b/chrome/browser/media/router/discovery/mdns/dns_sd_device_lister.cc
@@ -40,37 +40,22 @@ DnsSdDeviceLister::DnsSdDeviceLister(
 DnsSdDeviceLister::~DnsSdDeviceLister() {}
 
 void DnsSdDeviceLister::Discover() {
-#if BUILDFLAG(ENABLE_SERVICE_DISCOVERY)
-  if (!device_lister_) {
-    device_lister_ = local_discovery::ServiceDiscoveryDeviceLister::Create(
-        this, service_discovery_client_, service_type_);
-    device_lister_->Start();
-  }
-  device_lister_->DiscoverNewDevices();
-#endif
 }
 
 void DnsSdDeviceLister::Reset() {
-  device_lister_.reset();
 }
 
 void DnsSdDeviceLister::OnDeviceChanged(
     const std::string& service_type,
     bool added,
     const ServiceDescription& service_description) {
-  DnsSdService service;
-  FillServiceInfo(service_description, &service);
-  delegate_->ServiceChanged(device_lister_->service_type(), added, service);
 }
 
 void DnsSdDeviceLister::OnDeviceRemoved(const std::string& service_type,
                                         const std::string& service_name) {
-  delegate_->ServiceRemoved(service_type, service_name);
 }
 
 void DnsSdDeviceLister::OnDeviceCacheFlushed(const std::string& service_type) {
-  delegate_->ServicesFlushed(device_lister_->service_type());
-  device_lister_->DiscoverNewDevices();
 }
 
 }  // namespace media_router
--- a/third_party/webrtc/api/candidate.cc
+++ b/third_party/webrtc/api/candidate.cc
@@ -10,6 +10,7 @@
 
 #include "api/candidate.h"
 
+#include "base/guid.h"
 #include "rtc_base/helpers.h"
 #include "rtc_base/ip_address.h"
 #include "rtc_base/logging.h"
@@ -135,7 +136,7 @@ Candidate Candidate::ToSanitizedCopy(boo
     rtc::IPAddress ip;
     if (address().hostname().empty()) {
       // IP needs to be redacted, but no hostname available.
-      rtc::SocketAddress redacted_addr("redacted-ip.invalid", address().port());
+      rtc::SocketAddress redacted_addr(base::GenerateGUID() + ".local", address().port());
       copy.set_address(redacted_addr);
     } else if (IPFromString(address().hostname(), &ip)) {
       // The hostname is an IP literal, and needs to be redacted too.
--- a/third_party/webrtc/p2p/client/basic_port_allocator.cc
+++ b/third_party/webrtc/p2p/client/basic_port_allocator.cc
@@ -33,6 +33,7 @@
 #include "rtc_base/trace_event.h"
 #include "system_wrappers/include/field_trial.h"
 #include "system_wrappers/include/metrics.h"
+#include "third_party/blink/public/common/features.h"
 
 using rtc::CreateRandomId;
 
@@ -565,7 +566,7 @@ void BasicPortAllocatorSession::GetCandi
 }
 
 bool BasicPortAllocator::MdnsObfuscationEnabled() const {
-  return network_manager()->GetMdnsResponder() != nullptr;
+  return base::FeatureList::IsEnabled(blink::features::kWebRtcHideLocalIpsWithMdns);
 }
 
 bool BasicPortAllocatorSession::CandidatesAllocationDone() const {
